/* tslint:disable */
/* eslint-disable */
/**
 * BMLT
 * BMLT Admin API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RootServerBaseStatistics } from './RootServerBaseStatistics';
import {
    RootServerBaseStatisticsFromJSON,
    RootServerBaseStatisticsFromJSONTyped,
    RootServerBaseStatisticsToJSON,
    RootServerBaseStatisticsToJSONTyped,
} from './RootServerBaseStatistics';

/**
 * 
 * @export
 * @interface RootServerBase
 */
export interface RootServerBase {
    /**
     * 
     * @type {number}
     * @memberof RootServerBase
     */
    sourceId?: number;
    /**
     * 
     * @type {string}
     * @memberof RootServerBase
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof RootServerBase
     */
    url?: string;
    /**
     * 
     * @type {RootServerBaseStatistics}
     * @memberof RootServerBase
     */
    statistics?: RootServerBaseStatistics;
    /**
     * 
     * @type {string}
     * @memberof RootServerBase
     */
    serverInfo?: string;
    /**
     * 
     * @type {Date}
     * @memberof RootServerBase
     */
    lastSuccessfulImport?: Date;
}

/**
 * Check if a given object implements the RootServerBase interface.
 */
export function instanceOfRootServerBase(value: object): value is RootServerBase {
    return true;
}

export function RootServerBaseFromJSON(json: any): RootServerBase {
    return RootServerBaseFromJSONTyped(json, false);
}

export function RootServerBaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): RootServerBase {
    if (json == null) {
        return json;
    }
    return {
        
        'sourceId': json['sourceId'] == null ? undefined : json['sourceId'],
        'name': json['name'] == null ? undefined : json['name'],
        'url': json['url'] == null ? undefined : json['url'],
        'statistics': json['statistics'] == null ? undefined : RootServerBaseStatisticsFromJSON(json['statistics']),
        'serverInfo': json['serverInfo'] == null ? undefined : json['serverInfo'],
        'lastSuccessfulImport': json['lastSuccessfulImport'] == null ? undefined : (new Date(json['lastSuccessfulImport'])),
    };
}

export function RootServerBaseToJSON(json: any): RootServerBase {
    return RootServerBaseToJSONTyped(json, false);
}

export function RootServerBaseToJSONTyped(value?: RootServerBase | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'sourceId': value['sourceId'],
        'name': value['name'],
        'url': value['url'],
        'statistics': RootServerBaseStatisticsToJSON(value['statistics']),
        'serverInfo': value['serverInfo'],
        'lastSuccessfulImport': value['lastSuccessfulImport'] == null ? undefined : ((value['lastSuccessfulImport']).toISOString()),
    };
}

