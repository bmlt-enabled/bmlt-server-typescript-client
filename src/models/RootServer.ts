/* tslint:disable */
/* eslint-disable */
/**
 * BMLT
 * BMLT Admin API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RootServerBaseStatistics } from './RootServerBaseStatistics';
import {
    RootServerBaseStatisticsFromJSON,
    RootServerBaseStatisticsFromJSONTyped,
    RootServerBaseStatisticsToJSON,
    RootServerBaseStatisticsToJSONTyped,
} from './RootServerBaseStatistics';

/**
 * 
 * @export
 * @interface RootServer
 */
export interface RootServer {
    /**
     * 
     * @type {number}
     * @memberof RootServer
     */
    sourceId: number;
    /**
     * 
     * @type {string}
     * @memberof RootServer
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof RootServer
     */
    url: string;
    /**
     * 
     * @type {RootServerBaseStatistics}
     * @memberof RootServer
     */
    statistics?: RootServerBaseStatistics;
    /**
     * 
     * @type {string}
     * @memberof RootServer
     */
    serverInfo?: string;
    /**
     * 
     * @type {Date}
     * @memberof RootServer
     */
    lastSuccessfulImport: Date;
    /**
     * 
     * @type {number}
     * @memberof RootServer
     */
    id: number;
}

/**
 * Check if a given object implements the RootServer interface.
 */
export function instanceOfRootServer(value: object): value is RootServer {
    if (!('sourceId' in value) || value['sourceId'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('url' in value) || value['url'] === undefined) return false;
    if (!('lastSuccessfulImport' in value) || value['lastSuccessfulImport'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    return true;
}

export function RootServerFromJSON(json: any): RootServer {
    return RootServerFromJSONTyped(json, false);
}

export function RootServerFromJSONTyped(json: any, ignoreDiscriminator: boolean): RootServer {
    if (json == null) {
        return json;
    }
    return {
        
        'sourceId': json['sourceId'],
        'name': json['name'],
        'url': json['url'],
        'statistics': json['statistics'] == null ? undefined : RootServerBaseStatisticsFromJSON(json['statistics']),
        'serverInfo': json['serverInfo'] == null ? undefined : json['serverInfo'],
        'lastSuccessfulImport': (new Date(json['lastSuccessfulImport'])),
        'id': json['id'],
    };
}

export function RootServerToJSON(json: any): RootServer {
    return RootServerToJSONTyped(json, false);
}

export function RootServerToJSONTyped(value?: RootServer | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'sourceId': value['sourceId'],
        'name': value['name'],
        'url': value['url'],
        'statistics': RootServerBaseStatisticsToJSON(value['statistics']),
        'serverInfo': value['serverInfo'],
        'lastSuccessfulImport': value['lastSuccessfulImport'].toISOString(),
        'id': value['id'],
    };
}

