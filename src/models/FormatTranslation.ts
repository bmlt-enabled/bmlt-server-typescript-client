/* tslint:disable */
/* eslint-disable */
/**
 * BMLT
 * BMLT Admin API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface FormatTranslation
 */
export interface FormatTranslation {
    /**
     * 
     * @type {string}
     * @memberof FormatTranslation
     */
    key: string;
    /**
     * 
     * @type {string}
     * @memberof FormatTranslation
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof FormatTranslation
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof FormatTranslation
     */
    language: string;
}

/**
 * Check if a given object implements the FormatTranslation interface.
 */
export function instanceOfFormatTranslation(value: object): value is FormatTranslation {
    if (!('key' in value) || value['key'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('language' in value) || value['language'] === undefined) return false;
    return true;
}

export function FormatTranslationFromJSON(json: any): FormatTranslation {
    return FormatTranslationFromJSONTyped(json, false);
}

export function FormatTranslationFromJSONTyped(json: any, ignoreDiscriminator: boolean): FormatTranslation {
    if (json == null) {
        return json;
    }
    return {
        
        'key': json['key'],
        'name': json['name'],
        'description': json['description'],
        'language': json['language'],
    };
}

export function FormatTranslationToJSON(json: any): FormatTranslation {
    return FormatTranslationToJSONTyped(json, false);
}

export function FormatTranslationToJSONTyped(value?: FormatTranslation | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'key': value['key'],
        'name': value['name'],
        'description': value['description'],
        'language': value['language'],
    };
}

