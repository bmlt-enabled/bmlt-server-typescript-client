/* tslint:disable */
/* eslint-disable */
/**
 * BMLT
 * BMLT Admin API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ServiceBodyBase
 */
export interface ServiceBodyBase {
    /**
     * 
     * @type {number}
     * @memberof ServiceBodyBase
     */
    parentId?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ServiceBodyBase
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceBodyBase
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceBodyBase
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof ServiceBodyBase
     */
    adminUserId?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceBodyBase
     */
    assignedUserIds?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof ServiceBodyBase
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceBodyBase
     */
    helpline?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceBodyBase
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceBodyBase
     */
    worldId?: string;
}

/**
 * Check if a given object implements the ServiceBodyBase interface.
 */
export function instanceOfServiceBodyBase(value: object): value is ServiceBodyBase {
    return true;
}

export function ServiceBodyBaseFromJSON(json: any): ServiceBodyBase {
    return ServiceBodyBaseFromJSONTyped(json, false);
}

export function ServiceBodyBaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ServiceBodyBase {
    if (json == null) {
        return json;
    }
    return {
        
        'parentId': json['parentId'] == null ? undefined : json['parentId'],
        'name': json['name'] == null ? undefined : json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'type': json['type'] == null ? undefined : json['type'],
        'adminUserId': json['adminUserId'] == null ? undefined : json['adminUserId'],
        'assignedUserIds': json['assignedUserIds'] == null ? undefined : json['assignedUserIds'],
        'url': json['url'] == null ? undefined : json['url'],
        'helpline': json['helpline'] == null ? undefined : json['helpline'],
        'email': json['email'] == null ? undefined : json['email'],
        'worldId': json['worldId'] == null ? undefined : json['worldId'],
    };
}

export function ServiceBodyBaseToJSON(json: any): ServiceBodyBase {
    return ServiceBodyBaseToJSONTyped(json, false);
}

export function ServiceBodyBaseToJSONTyped(value?: ServiceBodyBase | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'parentId': value['parentId'],
        'name': value['name'],
        'description': value['description'],
        'type': value['type'],
        'adminUserId': value['adminUserId'],
        'assignedUserIds': value['assignedUserIds'],
        'url': value['url'],
        'helpline': value['helpline'],
        'email': value['email'],
        'worldId': value['worldId'],
    };
}

